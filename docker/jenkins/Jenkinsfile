/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

def integrate_result="unknown"
pipeline {
    agent any
    environment {
       integrate_result_home = "/home"
    }
    stages {
        stage('Test') {
            steps {
                echo 'Packaging....'
                sh 'mvn -P docker install'
            }
        }
        stage('Integrations Test') {
            steps {
                echo 'Integrations Test....'
                sh 'printenv'
                dir('docker/bin'){
                    sh ' pwd && git branch '
                    updateGitlabCommitStatus name: 'build', state: 'running'
                    sh './integrate_test.sh -s ${integrate_result_home} -b $(pwd)/integration/benchmark'
                }
                script{
                    def json_file = "${env.integrate_result_home}/score.json"
                    def exists = fileExists json_file
                    if(exists){
                        echo "${json_file}"
                        integrate_result = readFile json_file
                        sh "rm ${json_file}"
                    }else {
                        echo 'score file not exist'
                     }
                }
            }
        }
    }
    post {
            failure {
              updateGitlabCommitStatus name: 'build', state: 'failed'
            }
            success {
              updateGitlabCommitStatus name: 'build', state: 'success'
            }
            always {
                script{
                    echo "${integrate_result}"
                    def resultIcon = currentBuild.result == 'SUCCESS' ? ':white_check_mark:' : ':anguished:'
                    def performance = currentBuild.result == 'SUCCESS' ? "${integrate_result}" : ' '
                    addGitLabMRComment comment: "$resultIcon Jenkins Build $currentBuild.result\n\nResults available at: [Jenkins [$env.JOB_NAME#$env.BUILD_NUMBER]]($env.BUILD_URL) \n\n ${performance} "
                    echo 'I will always say Hello again!'
                }
             }
      }

}